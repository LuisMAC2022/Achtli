{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Achtli Este es un proyecto que busca recuperar la memoria mexica por medio del rescate al medio ambiente. Instalaci\u00f3n Aseg\u00farate de tener las herramientas b\u00e1sicas para compilar el m\u00f3dulo WebAssembly y ejecutar el prototipo. Instalar Rust Visita https://www.rust-lang.org/tools/install y sigue las instrucciones. En la mayor\u00eda de los sistemas puedes ejecutar: bash curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh Comprueba que Rust qued\u00f3 listo con rustc --version . Instalar Node.js Descarga la versi\u00f3n LTS desde https://nodejs.org/ o usa el gestor de paquetes de tu sistema. Verifica la instalaci\u00f3n con node --version . Instalar wasm-pack Con Rust ya instalado ejecuta: bash curl -sSf https://rustwasm.github.io/wasm-pack/installer/init.sh | sh Comprueba que el comando wasm-pack funciona ejecutando wasm-pack --version . Ejecutar el prototipo Genera los archivos WebAssembly: bash wasm-pack build --target web wasm_game Abre game.html en un navegador moderno. Puedes hacerlo directamente o sirviendo la carpeta con un peque\u00f1o servidor web. Usa las flechas del teclado o los controles t\u00e1ctiles para mover al personaje. Si la compilaci\u00f3n no est\u00e1 disponible, el juego utiliza autom\u00e1ticamente una versi\u00f3n en JavaScript como respaldo. Pruebas autom\u00e1ticas El repositorio ya cuenta con pruebas en Rust y JavaScript . Puedes ejecutarlas con: cargo test # pruebas de Rust npm test # pruebas de JS y wasm (requiere wasm-pack) Aseg\u00farate de que wasm-pack est\u00e9 instalado y disponible en tu PATH , ya que npm test lo utiliza para compilar y ejecutar la biblioteca WebAssembly. Las pruebas automatizadas verifican que cada parte del proyecto funcione como se espera y se ejecutar\u00e1n tambi\u00e9n en GitHub Actions cuando env\u00edes c\u00f3digo al repositorio. Si la compilaci\u00f3n no est\u00e1 disponible, el juego utiliza una versi\u00f3n en JavaScript puro como respaldo. Respaldo en JavaScript El archivo game.js replica la misma mec\u00e1nica implementada en Rust para wasm_game . Mueve al personaje, detecta colisiones y lleva el conteo de plantas igual que la biblioteca WebAssembly. As\u00ed el t\u00edtulo sigue funcionando si el m\u00f3dulo wasm falla o no se compila. Para mantener la coherencia, actualiza el c\u00f3digo JavaScript y el Rust al mismo tiempo cada que modifiques la l\u00f3gica del juego. Conserva la misma interfaz p\u00fablica y verifica el comportamiento en ambos entornos para evitar divergencias. \u00bfVentaja o desventaja? Tener dos implementaciones ayuda a depurar y garantiza accesibilidad, pero duplica el esfuerzo de mantenimiento. Decide si conservar el espejo en JS seg\u00fan el tiempo disponible y la utilidad que aporte. Abre game.html en un navegador moderno y usa las flechas para mover al personaje. cambios por a\u00f1adir: -> sustituir imagenes de baja resolucion con mapas de google (falta creacion de api de google) -> asegurarse que el dise\u00f1o sea accesible","title":"Inicio"},{"location":"#achtli","text":"Este es un proyecto que busca recuperar la memoria mexica por medio del rescate al medio ambiente.","title":"Achtli"},{"location":"#instalacion","text":"Aseg\u00farate de tener las herramientas b\u00e1sicas para compilar el m\u00f3dulo WebAssembly y ejecutar el prototipo. Instalar Rust Visita https://www.rust-lang.org/tools/install y sigue las instrucciones. En la mayor\u00eda de los sistemas puedes ejecutar: bash curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh Comprueba que Rust qued\u00f3 listo con rustc --version . Instalar Node.js Descarga la versi\u00f3n LTS desde https://nodejs.org/ o usa el gestor de paquetes de tu sistema. Verifica la instalaci\u00f3n con node --version . Instalar wasm-pack Con Rust ya instalado ejecuta: bash curl -sSf https://rustwasm.github.io/wasm-pack/installer/init.sh | sh Comprueba que el comando wasm-pack funciona ejecutando wasm-pack --version .","title":"Instalaci\u00f3n"},{"location":"#ejecutar-el-prototipo","text":"Genera los archivos WebAssembly: bash wasm-pack build --target web wasm_game Abre game.html en un navegador moderno. Puedes hacerlo directamente o sirviendo la carpeta con un peque\u00f1o servidor web. Usa las flechas del teclado o los controles t\u00e1ctiles para mover al personaje. Si la compilaci\u00f3n no est\u00e1 disponible, el juego utiliza autom\u00e1ticamente una versi\u00f3n en JavaScript como respaldo.","title":"Ejecutar el prototipo"},{"location":"#pruebas-automaticas","text":"El repositorio ya cuenta con pruebas en Rust y JavaScript . Puedes ejecutarlas con: cargo test # pruebas de Rust npm test # pruebas de JS y wasm (requiere wasm-pack) Aseg\u00farate de que wasm-pack est\u00e9 instalado y disponible en tu PATH , ya que npm test lo utiliza para compilar y ejecutar la biblioteca WebAssembly. Las pruebas automatizadas verifican que cada parte del proyecto funcione como se espera y se ejecutar\u00e1n tambi\u00e9n en GitHub Actions cuando env\u00edes c\u00f3digo al repositorio. Si la compilaci\u00f3n no est\u00e1 disponible, el juego utiliza una versi\u00f3n en JavaScript puro como respaldo.","title":"Pruebas autom\u00e1ticas"},{"location":"#respaldo-en-javascript","text":"El archivo game.js replica la misma mec\u00e1nica implementada en Rust para wasm_game . Mueve al personaje, detecta colisiones y lleva el conteo de plantas igual que la biblioteca WebAssembly. As\u00ed el t\u00edtulo sigue funcionando si el m\u00f3dulo wasm falla o no se compila. Para mantener la coherencia, actualiza el c\u00f3digo JavaScript y el Rust al mismo tiempo cada que modifiques la l\u00f3gica del juego. Conserva la misma interfaz p\u00fablica y verifica el comportamiento en ambos entornos para evitar divergencias.","title":"Respaldo en JavaScript"},{"location":"#ventaja-o-desventaja","text":"Tener dos implementaciones ayuda a depurar y garantiza accesibilidad, pero duplica el esfuerzo de mantenimiento. Decide si conservar el espejo en JS seg\u00fan el tiempo disponible y la utilidad que aporte. Abre game.html en un navegador moderno y usa las flechas para mover al personaje. cambios por a\u00f1adir: -> sustituir imagenes de baja resolucion con mapas de google (falta creacion de api de google) -> asegurarse que el dise\u00f1o sea accesible","title":"\u00bfVentaja o desventaja?"},{"location":"decisiones/","text":"Registros de decisiones La siguiente lista incluye los archivos en la carpeta decisiones . 20250630-actualizar-sha.md 20250630-automatizar-sha-en-actions.md 20250630-configurar-gh-actions.md 20250630-crear-agents.md 20250630-evitar-doble-flujo.md 20250630-fix-html-tags.md 20250630-js-mirror-guide.md 20250630-overlay-detalle-plantas.md 20250630-permisos-escritura-actions.md 20250630-remover-automatizacion-sha.md 20250630-script-sha.md 20250701-modular-js.md 20250701-prototipo-wasm.md 20250702-fix-counter.md 20250703-js-fallback.md 20250704-controles-canvas.md 20250705-rust-action.md 20250706-fix-gemfile.md 20250707-pink-canvas-main.md 20250708-canvas-pantalla-completa.md 20250709-cuadro-controlable.md 20250710-controles-tactiles.md 20250711-ordenar-sha-y-remover-jekyll.md 20250712-fix-touch-fallback.md 20250712-fix-touch-style.md 20250713-integrar-game-wasm.md 20250714-version-canvas.md 20250715-plantas-tactiles.md 20250716-mejorar-readme-instrucciones.md 20250716-test-frameworks.md 20250717-plant-growth.md 20250717-readme-tests.md 20250718-growth-colors-version.md 20250719-madurez-overlay-colision.md 20250720-mkdocs-integracion.md 20250721-documentar-funciones.md","title":"Decisiones"},{"location":"decisiones/#registros-de-decisiones","text":"La siguiente lista incluye los archivos en la carpeta decisiones . 20250630-actualizar-sha.md 20250630-automatizar-sha-en-actions.md 20250630-configurar-gh-actions.md 20250630-crear-agents.md 20250630-evitar-doble-flujo.md 20250630-fix-html-tags.md 20250630-js-mirror-guide.md 20250630-overlay-detalle-plantas.md 20250630-permisos-escritura-actions.md 20250630-remover-automatizacion-sha.md 20250630-script-sha.md 20250701-modular-js.md 20250701-prototipo-wasm.md 20250702-fix-counter.md 20250703-js-fallback.md 20250704-controles-canvas.md 20250705-rust-action.md 20250706-fix-gemfile.md 20250707-pink-canvas-main.md 20250708-canvas-pantalla-completa.md 20250709-cuadro-controlable.md 20250710-controles-tactiles.md 20250711-ordenar-sha-y-remover-jekyll.md 20250712-fix-touch-fallback.md 20250712-fix-touch-style.md 20250713-integrar-game-wasm.md 20250714-version-canvas.md 20250715-plantas-tactiles.md 20250716-mejorar-readme-instrucciones.md 20250716-test-frameworks.md 20250717-plant-growth.md 20250717-readme-tests.md 20250718-growth-colors-version.md 20250719-madurez-overlay-colision.md 20250720-mkdocs-integracion.md 20250721-documentar-funciones.md","title":"Registros de decisiones"},{"location":"funciones/","text":"Referencia de funciones Esta p\u00e1gina describe brevemente las funciones disponibles en el proyecto. JavaScript js/game-logic.js seedColor() y matureColor() generan colores aleatorios para las plantas. jsGrowthInterval(species) define el tiempo de crecimiento seg\u00fan la especie. jsUpdatePlants(plants, dt) actualiza el avance de todas las plantas. jsCollectAt(plants, x, y) intenta recolectar una planta madura cercana. jsFindPlantAt(plants, x, y) devuelve el \u00edndice de una planta en las coordenadas. createInitialPlants() crea el conjunto inicial de plantas para el modo JS. js/ui.js setupUI(canvas, overlay, plantInfo, actions) conecta los controles del jugador y muestra informaci\u00f3n de cada planta. js/main.js start() es el punto de entrada; carga el m\u00f3dulo wasm y comienza el ciclo de dibujo. Funciones internas como movePlayer() o draw() gestionan la l\u00f3gica de movimiento, colisiones y renderizado. Rust (wasm_game) draw_pink() pinta el fondo cuando se inicia el juego. Game gestiona la posici\u00f3n del jugador y las plantas. Sus m\u00e9todos permiten mover al jugador, actualizar el estado y recolectar. En growth.rs se define el c\u00e1lculo de colores y etapas de crecimiento.","title":"Funciones"},{"location":"funciones/#referencia-de-funciones","text":"Esta p\u00e1gina describe brevemente las funciones disponibles en el proyecto.","title":"Referencia de funciones"},{"location":"funciones/#javascript","text":"","title":"JavaScript"},{"location":"funciones/#jsgame-logicjs","text":"seedColor() y matureColor() generan colores aleatorios para las plantas. jsGrowthInterval(species) define el tiempo de crecimiento seg\u00fan la especie. jsUpdatePlants(plants, dt) actualiza el avance de todas las plantas. jsCollectAt(plants, x, y) intenta recolectar una planta madura cercana. jsFindPlantAt(plants, x, y) devuelve el \u00edndice de una planta en las coordenadas. createInitialPlants() crea el conjunto inicial de plantas para el modo JS.","title":"js/game-logic.js"},{"location":"funciones/#jsuijs","text":"setupUI(canvas, overlay, plantInfo, actions) conecta los controles del jugador y muestra informaci\u00f3n de cada planta.","title":"js/ui.js"},{"location":"funciones/#jsmainjs","text":"start() es el punto de entrada; carga el m\u00f3dulo wasm y comienza el ciclo de dibujo. Funciones internas como movePlayer() o draw() gestionan la l\u00f3gica de movimiento, colisiones y renderizado.","title":"js/main.js"},{"location":"funciones/#rust-wasm_game","text":"draw_pink() pinta el fondo cuando se inicia el juego. Game gestiona la posici\u00f3n del jugador y las plantas. Sus m\u00e9todos permiten mover al jugador, actualizar el estado y recolectar. En growth.rs se define el c\u00e1lculo de colores y etapas de crecimiento.","title":"Rust (wasm_game)"}]}