{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Achtli","text":"<p>Este es un proyecto que busca recuperar la memoria mexica por medio del rescate al medio ambiente.</p>"},{"location":"#instalacion","title":"Instalaci\u00f3n","text":"<p>Aseg\u00farate de tener las herramientas b\u00e1sicas para compilar el m\u00f3dulo WebAssembly y ejecutar el prototipo.</p> <ol> <li>Instalar Rust</li> <li>Visita https://www.rust-lang.org/tools/install y sigue las instrucciones.</li> <li>En la mayor\u00eda de los sistemas puedes ejecutar:      <code>bash      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh</code></li> <li>Comprueba que Rust qued\u00f3 listo con <code>rustc --version</code>.</li> <li>Instalar Node.js</li> <li>Descarga la versi\u00f3n LTS desde https://nodejs.org/ o usa el gestor de paquetes de tu sistema.</li> <li>Verifica la instalaci\u00f3n con <code>node --version</code>.</li> <li>Instalar wasm-pack</li> <li>Con Rust ya instalado ejecuta:      <code>bash      curl -sSf https://rustwasm.github.io/wasm-pack/installer/init.sh | sh</code></li> <li>Comprueba que el comando <code>wasm-pack</code> funciona ejecutando <code>wasm-pack --version</code>.</li> </ol>"},{"location":"#ejecutar-el-prototipo","title":"Ejecutar el prototipo","text":"<ol> <li>Genera los archivos WebAssembly:    <code>bash    wasm-pack build --target web wasm_game</code></li> <li>Abre <code>game.html</code> en un navegador moderno. Puedes hacerlo directamente o sirviendo la carpeta con un peque\u00f1o servidor web.</li> <li>Usa las flechas del teclado o los controles t\u00e1ctiles para mover al personaje.</li> </ol> <p>Si la compilaci\u00f3n no est\u00e1 disponible, el juego utiliza autom\u00e1ticamente una versi\u00f3n en JavaScript como respaldo.</p>"},{"location":"#pruebas-automaticas","title":"Pruebas autom\u00e1ticas","text":"<p>El repositorio ya cuenta con pruebas en Rust y JavaScript. Puedes ejecutarlas con:</p> <pre><code>cargo test       # pruebas de Rust\nnpm test         # pruebas de JS y wasm (requiere wasm-pack)\n</code></pre> <p>Aseg\u00farate de que <code>wasm-pack</code> est\u00e9 instalado y disponible en tu <code>PATH</code>, ya que <code>npm test</code> lo utiliza para compilar y ejecutar la biblioteca WebAssembly. Las pruebas automatizadas verifican que cada parte del proyecto funcione como se espera y se ejecutar\u00e1n tambi\u00e9n en GitHub Actions cuando env\u00edes c\u00f3digo al repositorio.</p> <p>Si la compilaci\u00f3n no est\u00e1 disponible, el juego utiliza una versi\u00f3n en JavaScript puro como respaldo.</p>"},{"location":"#respaldo-en-javascript","title":"Respaldo en JavaScript","text":"<p>El archivo <code>game.js</code> replica la misma mec\u00e1nica implementada en Rust para <code>wasm_game</code>.  Mueve al personaje, detecta colisiones y lleva el conteo de plantas igual que la biblioteca WebAssembly.  As\u00ed el t\u00edtulo sigue funcionando si el m\u00f3dulo wasm falla o no se compila.</p> <p>Para mantener la coherencia, actualiza el c\u00f3digo JavaScript y el Rust al mismo tiempo cada que modifiques la l\u00f3gica del juego.  Conserva la misma interfaz p\u00fablica y verifica el comportamiento en ambos entornos para evitar divergencias.</p>"},{"location":"#ventaja-o-desventaja","title":"\u00bfVentaja o desventaja?","text":"<p>Tener dos implementaciones ayuda a depurar y garantiza accesibilidad, pero duplica el esfuerzo de mantenimiento.  Decide si conservar el espejo en JS seg\u00fan el tiempo disponible y la utilidad que aporte.</p> <p>Abre <code>game.html</code> en un navegador moderno y usa las flechas para mover al personaje.</p> <p>Para conocer cada funci\u00f3n disponible, revisa la referencia de funciones.</p> <p>cambios por a\u00f1adir:</p> <p>-&gt; sustituir imagenes de baja resolucion con mapas de google (falta creacion de api de google) -&gt; asegurarse que el dise\u00f1o sea accesible</p>"},{"location":"decisiones/","title":"Registros de decisiones","text":"<p>La siguiente lista incluye los archivos en la carpeta <code>decisiones</code>.</p> <ul> <li>20250630-actualizar-sha.md</li> <li>20250630-automatizar-sha-en-actions.md</li> <li>20250630-configurar-gh-actions.md</li> <li>20250630-crear-agents.md</li> <li>20250630-evitar-doble-flujo.md</li> <li>20250630-fix-html-tags.md</li> <li>20250630-js-mirror-guide.md</li> <li>20250630-overlay-detalle-plantas.md</li> <li>20250630-permisos-escritura-actions.md</li> <li>20250630-remover-automatizacion-sha.md</li> <li>20250630-script-sha.md</li> <li>20250701-modular-js.md</li> <li>20250701-prototipo-wasm.md</li> <li>20250702-fix-counter.md</li> <li>20250703-js-fallback.md</li> <li>20250704-controles-canvas.md</li> <li>20250705-rust-action.md</li> <li>20250706-fix-gemfile.md</li> <li>20250707-pink-canvas-main.md</li> <li>20250708-canvas-pantalla-completa.md</li> <li>20250709-cuadro-controlable.md</li> <li>20250710-controles-tactiles.md</li> <li>20250711-ordenar-sha-y-remover-jekyll.md</li> <li>20250712-fix-touch-fallback.md</li> <li>20250712-fix-touch-style.md</li> <li>20250713-integrar-game-wasm.md</li> <li>20250714-version-canvas.md</li> <li>20250715-plantas-tactiles.md</li> <li>20250716-mejorar-readme-instrucciones.md</li> <li>20250716-test-frameworks.md</li> <li>20250717-plant-growth.md</li> <li>20250717-readme-tests.md</li> <li>20250718-growth-colors-version.md</li> <li>20250719-madurez-overlay-colision.md</li> <li>20250720-mkdocs-integracion.md</li> <li>20250721-documentar-funciones.md</li> <li>20250722-mkdocs-material.md</li> <li>20250723-links-funciones.md</li> </ul> <p>Para conocer la implementaci\u00f3n de cada secci\u00f3n del juego visita la referencia de funciones.</p>"},{"location":"funciones/","title":"Referencia de funciones","text":"<p>Esta p\u00e1gina describe brevemente las funciones disponibles en el proyecto.</p>"},{"location":"funciones/#javascript","title":"JavaScript","text":""},{"location":"funciones/#jsgame-logicjs","title":"js/game-logic.js","text":"<code>seedColor()</code> y <code>matureColor()</code> Generan colores aleatorios para las plantas.  <code>jsGrowthInterval(species)</code> Define el tiempo de crecimiento seg\u00fan la especie.  <code>jsUpdatePlants(plants, dt)</code> Actualiza el avance de todas las plantas.  <code>jsCollectAt(plants, x, y)</code> Intenta recolectar una planta madura cercana.  <code>jsFindPlantAt(plants, x, y)</code> Devuelve el \u00edndice de una planta en las coordenadas.  <code>createInitialPlants()</code> Crea el conjunto inicial de plantas para el modo JS."},{"location":"funciones/#jsuijs","title":"js/ui.js","text":"<code>setupUI(canvas, overlay, plantInfo, actions)</code> Conecta los controles del jugador y muestra informaci\u00f3n de cada planta."},{"location":"funciones/#jsmainjs","title":"js/main.js","text":"<code>start()</code> Carga el m\u00f3dulo wasm y comienza el ciclo de dibujo.  <code>movePlayer()</code> y <code>draw()</code> Gestionan la l\u00f3gica de movimiento, colisiones y renderizado."},{"location":"funciones/#rust-wasm_game","title":"Rust (wasm_game)","text":""},{"location":"funciones/#wasm_gamesrclibrs","title":"wasm_game/src/lib.rs","text":"<code>draw_pink()</code> Pinta el fondo cuando se inicia el juego.  <code>Game</code> Gestiona la posici\u00f3n del jugador y las plantas. Sus m\u00e9todos permiten mover al jugador, actualizar el estado y recolectar."},{"location":"funciones/#wasm_gamesrcgrowthrs","title":"wasm_game/src/growth.rs","text":"<code>growth.rs</code> Define el c\u00e1lculo de colores y etapas de crecimiento."}]}